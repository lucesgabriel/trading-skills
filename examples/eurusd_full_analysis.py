import pandas as pd
import numpy as np
from io import StringIO

# Datos completos H1 (todas las 250 velas)
h1_csv = """time,open,high,low,close,tick_volume,spread,real_volume
2025-10-14 10:00:00+00:00,1.15704,1.15746,1.1542,1.15495,14243,0,0
2025-10-14 11:00:00+00:00,1.15497,1.1561,1.15457,1.15591,10497,0,0
2025-10-14 12:00:00+00:00,1.1559,1.15633,1.15515,1.1555,8332,0,0
2025-10-14 13:00:00+00:00,1.15548,1.15597,1.15511,1.15536,9529,0,0
2025-10-14 14:00:00+00:00,1.15537,1.15583,1.15463,1.15523,9231,0,0
2025-10-14 15:00:00+00:00,1.15522,1.15651,1.15479,1.15556,11068,0,0
2025-10-14 16:00:00+00:00,1.15556,1.1583,1.15541,1.1574,15250,0,0
2025-10-14 17:00:00+00:00,1.15739,1.15975,1.15692,1.15942,15330,0,0
2025-10-14 18:00:00+00:00,1.15942,1.16084,1.15866,1.16073,13986,0,0
2025-10-14 19:00:00+00:00,1.16072,1.1615,1.16011,1.16095,13280,0,0
2025-10-14 20:00:00+00:00,1.16094,1.16121,1.16018,1.16095,8380,0,0
2025-10-14 21:00:00+00:00,1.16094,1.1612,1.16034,1.1605,6480,0,0
2025-10-14 22:00:00+00:00,1.16049,1.16112,1.16045,1.16055,7645,0,0
2025-10-14 23:00:00+00:00,1.16055,1.1608100000000001,1.16,1.16077,2657,0,0
2025-10-15 00:00:00+00:00,1.16058,1.16076,1.16049,1.16071,463,12,0
2025-10-15 01:00:00+00:00,1.16071,1.16097,1.16034,1.16035,2140,0,0
2025-10-15 02:00:00+00:00,1.16035,1.16058,1.16019,1.16034,2344,0,0
2025-10-15 03:00:00+00:00,1.16034,1.1614200000000001,1.16016,1.16105,6108,0,0
2025-10-15 04:00:00+00:00,1.16105,1.1623,1.1607,1.16193,6876,0,0
2025-10-15 05:00:00+00:00,1.16195,1.1626,1.16178,1.16231,5601,0,0
2025-10-15 06:00:00+00:00,1.1623,1.16243,1.16184,1.16225,4592,0,0
2025-10-15 07:00:00+00:00,1.16226,1.16245,1.1617,1.16183,3657,0,0
2025-10-15 08:00:00+00:00,1.16184,1.16266,1.16184,1.16195,4539,0,0
2025-10-15 09:00:00+00:00,1.16194,1.16384,1.16176,1.1634,9683,0,0
2025-10-15 10:00:00+00:00,1.16342,1.16445,1.16291,1.16357,10717,0,0
2025-10-15 11:00:00+00:00,1.16358,1.16456,1.16316,1.16326,9504,0,0
2025-10-15 12:00:00+00:00,1.1632500000000001,1.16391,1.16277,1.16348,8836,0,0
2025-10-15 13:00:00+00:00,1.16348,1.16349,1.16204,1.16245,6667,0,0
2025-10-15 14:00:00+00:00,1.16244,1.1632500000000001,1.16195,1.16198,7513,0,0
2025-10-15 15:00:00+00:00,1.162,1.16277,1.16139,1.16176,11115,0,0
2025-10-15 16:00:00+00:00,1.16177,1.16321,1.16104,1.16275,14070,0,0
2025-10-15 17:00:00+00:00,1.16276,1.1630099999999999,1.16195,1.16245,11712,0,0
2025-10-15 18:00:00+00:00,1.16245,1.16472,1.16184,1.1637,12803,0,0
2025-10-15 19:00:00+00:00,1.1637,1.1641,1.16286,1.164,10427,0,0
2025-10-15 20:00:00+00:00,1.16399,1.16402,1.1627,1.16294,10143,0,0
2025-10-15 21:00:00+00:00,1.16295,1.16376,1.16278,1.16333,6633,0,0
2025-10-15 22:00:00+00:00,1.16333,1.16448,1.16331,1.16443,4938,0,0
2025-10-15 23:00:00+00:00,1.16443,1.16476,1.16427,1.16471,3087,0,0
2025-10-16 00:00:00+00:00,1.16433,1.16461,1.1641,1.16428,1081,12,0
2025-10-16 01:00:00+00:00,1.16429,1.1652,1.16429,1.16465,2439,0,0
2025-10-16 02:00:00+00:00,1.16465,1.16473,1.16446,1.1646,2908,0,0
2025-10-16 03:00:00+00:00,1.16458,1.16672,1.16428,1.16633,8564,0,0
2025-10-16 04:00:00+00:00,1.16634,1.16753,1.16611,1.16699,8836,0,0
2025-10-16 05:00:00+00:00,1.167,1.1675,1.16642,1.16661,5747,0,0
2025-10-16 06:00:00+00:00,1.1666,1.16675,1.16616,1.16623,3849,0,0
2025-10-16 07:00:00+00:00,1.16623,1.16623,1.16554,1.16562,2970,0,0
2025-10-16 08:00:00+00:00,1.16564,1.16616,1.16536,1.16601,5482,0,0
2025-10-16 09:00:00+00:00,1.16602,1.16681,1.16522,1.16539,9172,0,0
2025-10-16 10:00:00+00:00,1.16538,1.16568,1.16432,1.16519,11048,0,0
2025-10-16 11:00:00+00:00,1.1652,1.16599,1.16487,1.16589,9450,0,0
2025-10-16 12:00:00+00:00,1.16588,1.16638,1.16525,1.1657899999999999,8424,0,0
2025-10-16 13:00:00+00:00,1.1658,1.1663000000000001,1.16529,1.16553,7821,0,0
2025-10-16 14:00:00+00:00,1.16554,1.16565,1.16463,1.16539,8383,0,0
2025-10-16 15:00:00+00:00,1.1654,1.16617,1.16492,1.16605,9975,0,0
2025-10-16 16:00:00+00:00,1.16606,1.16643,1.16502,1.16575,12855,0,0
2025-10-16 17:00:00+00:00,1.16575,1.16781,1.16535,1.16772,12893,0,0
2025-10-16 18:00:00+00:00,1.16772,1.16783,1.16612,1.16646,10844,0,0
2025-10-16 19:00:00+00:00,1.16646,1.16791,1.16642,1.16772,13067,0,0
2025-10-16 20:00:00+00:00,1.16771,1.16936,1.16767,1.16883,11763,0,0
2025-10-16 21:00:00+00:00,1.1688399999999999,1.1693500000000001,1.16804,1.16893,8462,0,0
2025-10-16 22:00:00+00:00,1.16894,1.16943,1.16871,1.16888,6978,0,0
2025-10-16 23:00:00+00:00,1.16888,1.16913,1.16848,1.16873,2952,0,0
2025-10-17 00:00:00+00:00,1.16826,1.16888,1.16814,1.16868,1405,12,0
2025-10-17 01:00:00+00:00,1.16867,1.1696,1.16867,1.16946,2922,0,0
2025-10-17 02:00:00+00:00,1.16946,1.16997,1.16934,1.16993,2827,0,0
2025-10-17 03:00:00+00:00,1.16993,1.17113,1.16951,1.1706699999999999,6307,0,0
2025-10-17 04:00:00+00:00,1.17066,1.17098,1.16999,1.17009,7706,0,0
2025-10-17 05:00:00+00:00,1.17009,1.17115,1.16954,1.17054,6062,0,0
2025-10-17 06:00:00+00:00,1.17054,1.1712500000000001,1.17047,1.17092,4105,0,0
2025-10-17 07:00:00+00:00,1.17092,1.17123,1.1706,1.17099,3499,0,0
2025-10-17 08:00:00+00:00,1.17099,1.17283,1.17096,1.17232,5155,0,0
2025-10-17 09:00:00+00:00,1.17233,1.17268,1.17084,1.17108,11477,0,0
2025-10-17 10:00:00+00:00,1.17108,1.1715,1.16936,1.17118,15578,0,0
2025-10-17 11:00:00+00:00,1.17119,1.1716199999999999,1.1691799999999999,1.16974,11557,0,0
2025-10-17 12:00:00+00:00,1.16974,1.17077,1.16963,1.17013,8078,0,0
2025-10-17 13:00:00+00:00,1.17013,1.17029,1.16875,1.16895,7161,0,0
2025-10-17 14:00:00+00:00,1.16896,1.1697,1.16804,1.16851,10887,0,0
2025-10-17 15:00:00+00:00,1.16852,1.16865,1.16671,1.16765,12559,0,0
2025-10-17 16:00:00+00:00,1.16766,1.1681300000000001,1.1669100000000001,1.16705,13568,0,0
2025-10-17 17:00:00+00:00,1.16704,1.16734,1.16561,1.1667,15960,0,0
2025-10-17 18:00:00+00:00,1.16671,1.1673499999999999,1.16607,1.16734,11789,0,0
2025-10-17 19:00:00+00:00,1.1673499999999999,1.1679599999999999,1.16697,1.16709,8696,0,0
2025-10-17 20:00:00+00:00,1.16708,1.16759,1.16671,1.16679,7433,0,0
2025-10-17 21:00:00+00:00,1.1668,1.16745,1.16641,1.16679,6809,0,0
2025-10-17 22:00:00+00:00,1.16679,1.16713,1.1666,1.16706,5747,0,0
2025-10-17 23:00:00+00:00,1.16706,1.16706,1.16504,1.16531,3313,0,0
2025-10-20 00:00:00+00:00,1.1661299999999999,1.16663,1.16549,1.16551,1430,38,0
2025-10-20 01:00:00+00:00,1.1655,1.1658,1.16519,1.16563,2961,0,0
2025-10-20 02:00:00+00:00,1.16562,1.1662,1.16544,1.16578,2749,0,0
2025-10-20 03:00:00+00:00,1.1657899999999999,1.16667,1.16577,1.1666400000000001,6339,0,0
2025-10-20 04:00:00+00:00,1.16665,1.16676,1.16565,1.16602,5347,0,0
2025-10-20 05:00:00+00:00,1.16602,1.16706,1.16601,1.16657,3998,0,0
2025-10-20 06:00:00+00:00,1.16657,1.16689,1.1665,1.16684,3261,0,0
2025-10-20 07:00:00+00:00,1.16685,1.16739,1.16657,1.16716,3120,0,0
2025-10-20 08:00:00+00:00,1.16714,1.16757,1.16698,1.16736,3754,0,0
2025-10-20 09:00:00+00:00,1.16733,1.16733,1.16567,1.16585,8149,0,0
2025-10-20 10:00:00+00:00,1.16586,1.16683,1.16538,1.16624,9690,0,0
2025-10-20 11:00:00+00:00,1.16623,1.16667,1.1658,1.16636,8365,0,0
2025-10-20 12:00:00+00:00,1.16636,1.16678,1.1659,1.16619,9506,0,0
2025-10-20 13:00:00+00:00,1.16618,1.16631,1.16512,1.16533,7464,0,0
2025-10-20 14:00:00+00:00,1.16534,1.16565,1.16445,1.16564,8293,0,0
2025-10-20 15:00:00+00:00,1.16563,1.16604,1.16503,1.16535,10378,0,0
2025-10-20 16:00:00+00:00,1.16536,1.16547,1.16464,1.1649,10202,0,0
2025-10-20 17:00:00+00:00,1.1649,1.16645,1.16474,1.16537,9759,0,0
2025-10-20 18:00:00+00:00,1.16535,1.16646,1.16526,1.16552,9001,0,0
2025-10-20 19:00:00+00:00,1.16554,1.16584,1.16495,1.16496,6379,0,0
2025-10-20 20:00:00+00:00,1.16494,1.16531,1.1641,1.16435,5175,0,0
2025-10-20 21:00:00+00:00,1.16434,1.16485,1.16383,1.16465,4973,0,0
2025-10-20 22:00:00+00:00,1.16465,1.16493,1.1639599999999999,1.16408,4126,0,0
2025-10-20 23:00:00+00:00,1.16408,1.16445,1.16401,1.16412,2237,0,0
2025-10-21 00:00:00+00:00,1.16404,1.16445,1.16383,1.1643,753,12,0
2025-10-21 01:00:00+00:00,1.1643,1.16456,1.16427,1.16432,1704,0,0
2025-10-21 02:00:00+00:00,1.16432,1.16452,1.16426,1.16442,1817,0,0
2025-10-21 03:00:00+00:00,1.16441,1.16553,1.16431,1.16533,5521,0,0
2025-10-21 04:00:00+00:00,1.16532,1.16532,1.16417,1.16449,5640,0,0
2025-10-21 05:00:00+00:00,1.16451,1.16454,1.16327,1.1634,5297,0,0
2025-10-21 06:00:00+00:00,1.16342,1.1636199999999999,1.16326,1.16346,3740,0,0
2025-10-21 07:00:00+00:00,1.16347,1.16367,1.16319,1.16361,3637,0,0
2025-10-21 08:00:00+00:00,1.1636199999999999,1.16376,1.16243,1.16252,6079,0,0
2025-10-21 09:00:00+00:00,1.16252,1.16342,1.16187,1.16318,7349,0,0
2025-10-21 10:00:00+00:00,1.16318,1.16354,1.16216,1.16256,10012,0,0
2025-10-21 11:00:00+00:00,1.16255,1.16277,1.1613,1.16212,10579,0,0
2025-10-21 12:00:00+00:00,1.16211,1.16272,1.16159,1.16207,8364,0,0
2025-10-21 13:00:00+00:00,1.16208,1.16235,1.16067,1.1617899999999999,9160,0,0
2025-10-21 14:00:00+00:00,1.1618,1.16259,1.16093,1.1613,10480,0,0
2025-10-21 15:00:00+00:00,1.16129,1.16168,1.16021,1.16111,13090,0,0
2025-10-21 16:00:00+00:00,1.1611,1.1616900000000001,1.16025,1.16128,14906,0,0
2025-10-21 17:00:00+00:00,1.16128,1.16181,1.15978,1.16043,13992,0,0
2025-10-21 18:00:00+00:00,1.16044,1.16165,1.16043,1.1615,10802,0,0
2025-10-21 19:00:00+00:00,1.16151,1.16244,1.16079,1.1609099999999999,10712,0,0
2025-10-21 20:00:00+00:00,1.1609099999999999,1.161,1.16017,1.16041,7891,0,0
2025-10-21 21:00:00+00:00,1.16042,1.16087,1.16034,1.16051,4777,0,0
2025-10-21 22:00:00+00:00,1.16051,1.16078,1.16001,1.16008,4999,0,0
2025-10-21 23:00:00+00:00,1.16008,1.1602999999999999,1.15989,1.15995,2010,0,0
2025-10-22 00:00:00+00:00,1.15977,1.16034,1.15973,1.16021,952,12,0
2025-10-22 01:00:00+00:00,1.1602000000000001,1.1604,1.15995,1.16002,1900,0,0
2025-10-22 02:00:00+00:00,1.16002,1.16019,1.1599,1.1599599999999999,1488,0,0
2025-10-22 03:00:00+00:00,1.15994,1.1608100000000001,1.15994,1.16048,5119,0,0
2025-10-22 04:00:00+00:00,1.1604700000000001,1.16093,1.16015,1.16048,4071,0,0
2025-10-22 05:00:00+00:00,1.16048,1.1611,1.1604700000000001,1.16086,2815,0,0
2025-10-22 06:00:00+00:00,1.16087,1.1609099999999999,1.16045,1.1607,2375,0,0
2025-10-22 07:00:00+00:00,1.1607,1.16097,1.16048,1.16093,2286,0,0
2025-10-22 08:00:00+00:00,1.16093,1.16158,1.16092,1.16135,3365,0,0
2025-10-22 09:00:00+00:00,1.16139,1.16149,1.16042,1.16096,9671,0,0
2025-10-22 10:00:00+00:00,1.16097,1.16128,1.15997,1.16007,9094,0,0
2025-10-22 11:00:00+00:00,1.16009,1.16009,1.159,1.15976,9889,0,0
2025-10-22 12:00:00+00:00,1.15975,1.16022,1.15923,1.15949,6838,0,0
2025-10-22 13:00:00+00:00,1.15947,1.15973,1.1583,1.15859,6957,0,0
2025-10-22 14:00:00+00:00,1.15859,1.15893,1.15822,1.15827,9582,0,0
2025-10-22 15:00:00+00:00,1.15828,1.15917,1.1577,1.15832,9931,0,0
2025-10-22 16:00:00+00:00,1.15832,1.15977,1.15817,1.15949,10025,0,0
2025-10-22 17:00:00+00:00,1.1595,1.16115,1.15923,1.16111,10429,0,0
2025-10-22 18:00:00+00:00,1.16112,1.1617,1.16085,1.16114,11306,0,0
2025-10-22 19:00:00+00:00,1.16114,1.16224,1.16103,1.16196,9568,0,0
2025-10-22 20:00:00+00:00,1.16196,1.16205,1.16126,1.16146,6643,0,0
2025-10-22 21:00:00+00:00,1.16146,1.16157,1.16077,1.16092,5435,0,0
2025-10-22 22:00:00+00:00,1.16092,1.16113,1.16049,1.1606,4392,0,0
2025-10-22 23:00:00+00:00,1.1606,1.1611,1.1605699999999999,1.16094,1820,0,0
2025-10-23 00:00:00+00:00,1.16058,1.1611799999999999,1.16058,1.16113,895,12,0
2025-10-23 01:00:00+00:00,1.16113,1.16145,1.16109,1.16123,1579,0,0
2025-10-23 02:00:00+00:00,1.16123,1.16127,1.16066,1.16073,2306,0,0
2025-10-23 03:00:00+00:00,1.16073,1.16074,1.15978,1.16041,4655,0,0
2025-10-23 04:00:00+00:00,1.16042,1.16056,1.15977,1.1598,4243,0,0
2025-10-23 05:00:00+00:00,1.1598,1.15995,1.15951,1.15968,3011,0,0
2025-10-23 06:00:00+00:00,1.15966,1.15988,1.1592,1.1593,2052,0,0
2025-10-23 07:00:00+00:00,1.15929,1.15995,1.15904,1.15988,2825,0,0
2025-10-23 08:00:00+00:00,1.15988,1.16041,1.15968,1.16016,3277,0,0
2025-10-23 09:00:00+00:00,1.16016,1.16039,1.15903,1.15945,7537,0,0
2025-10-23 10:00:00+00:00,1.15945,1.16016,1.1590799999999999,1.16002,7577,0,0
2025-10-23 11:00:00+00:00,1.16002,1.16062,1.1593,1.1595900000000001,6713,0,0
2025-10-23 12:00:00+00:00,1.1596,1.16004,1.15929,1.15938,5611,0,0
2025-10-23 13:00:00+00:00,1.15937,1.1595,1.15857,1.15879,5557,0,0
2025-10-23 14:00:00+00:00,1.15879,1.15931,1.15852,1.15872,6803,0,0
2025-10-23 15:00:00+00:00,1.15873,1.16061,1.15865,1.16008,8426,0,0
2025-10-23 16:00:00+00:00,1.16007,1.16104,1.15983,1.16071,10629,0,0
2025-10-23 17:00:00+00:00,1.1607,1.16198,1.16055,1.16131,11230,0,0
2025-10-23 18:00:00+00:00,1.16131,1.16159,1.16063,1.1611799999999999,7494,0,0
2025-10-23 19:00:00+00:00,1.1611799999999999,1.16163,1.16065,1.16068,6346,0,0
2025-10-23 20:00:00+00:00,1.16069,1.16122,1.16043,1.1611799999999999,5269,0,0
2025-10-23 21:00:00+00:00,1.16119,1.1618,1.16096,1.16176,3683,0,0
2025-10-23 22:00:00+00:00,1.16176,1.1620300000000001,1.1615199999999999,1.16166,3300,0,0
2025-10-23 23:00:00+00:00,1.16166,1.16194,1.16136,1.1617899999999999,2151,0,0
2025-10-24 00:00:00+00:00,1.16163,1.1617899999999999,1.16139,1.16165,1489,12,0
2025-10-24 01:00:00+00:00,1.16165,1.16214,1.16165,1.1617899999999999,1462,0,0
2025-10-24 02:00:00+00:00,1.1617899999999999,1.16191,1.16148,1.16173,1780,0,0
2025-10-24 03:00:00+00:00,1.16173,1.16218,1.16168,1.1617899999999999,3111,0,0
2025-10-24 04:00:00+00:00,1.1617899999999999,1.1619,1.16087,1.16095,3645,0,0
2025-10-24 05:00:00+00:00,1.16093,1.16127,1.16076,1.1608,3364,0,0
2025-10-24 06:00:00+00:00,1.1608,1.16119,1.16071,1.1609,2268,0,0
2025-10-24 07:00:00+00:00,1.1609,1.16093,1.1605699999999999,1.16077,2119,0,0
2025-10-24 08:00:00+00:00,1.16076,1.1608100000000001,1.16019,1.16056,3261,0,0
2025-10-24 09:00:00+00:00,1.16056,1.1614,1.1601,1.16135,6517,0,0
2025-10-24 10:00:00+00:00,1.16136,1.16281,1.16018,1.16181,9730,0,0
2025-10-24 11:00:00+00:00,1.1618,1.16236,1.16062,1.16104,9509,0,0
2025-10-24 12:00:00+00:00,1.161,1.16131,1.16053,1.1612,6453,0,0
2025-10-24 13:00:00+00:00,1.16121,1.16166,1.16109,1.16127,5466,0,0
2025-10-24 14:00:00+00:00,1.16128,1.16158,1.16071,1.16151,7039,0,0
2025-10-24 15:00:00+00:00,1.1615199999999999,1.16485,1.16087,1.16341,15439,0,0
2025-10-24 16:00:00+00:00,1.16341,1.16434,1.16207,1.16269,13630,0,0
2025-10-24 17:00:00+00:00,1.16266,1.1636,1.16178,1.16262,12578,0,0
2025-10-24 18:00:00+00:00,1.16261,1.16355,1.16214,1.16253,9624,0,0
2025-10-24 19:00:00+00:00,1.16253,1.16277,1.16212,1.16257,5316,0,0
2025-10-24 20:00:00+00:00,1.16257,1.1632,1.16243,1.1627399999999999,4493,0,0
2025-10-24 21:00:00+00:00,1.16275,1.16281,1.16248,1.16262,4204,0,0
2025-10-24 22:00:00+00:00,1.16262,1.1633499999999999,1.16261,1.16314,4264,0,0
2025-10-24 23:00:00+00:00,1.16315,1.1636,1.16209,1.16272,3328,0,0
2025-10-27 00:00:00+00:00,1.1632,1.16356,1.16221,1.16282,1827,38,0
2025-10-27 01:00:00+00:00,1.16282,1.16353,1.16257,1.16284,4103,0,0
2025-10-27 02:00:00+00:00,1.16284,1.16328,1.16257,1.16313,2666,0,0
2025-10-27 03:00:00+00:00,1.16313,1.16377,1.1628,1.16349,4862,0,0
2025-10-27 04:00:00+00:00,1.16347,1.16478,1.16332,1.1639,5743,0,0
2025-10-27 05:00:00+00:00,1.16388,1.16397,1.16302,1.16308,3430,0,0
2025-10-27 06:00:00+00:00,1.16307,1.1632500000000001,1.16268,1.16276,2578,0,0
2025-10-27 07:00:00+00:00,1.16276,1.16279,1.16208,1.16245,3514,0,0
2025-10-27 08:00:00+00:00,1.16246,1.16272,1.16207,1.16263,3347,0,0
2025-10-27 09:00:00+00:00,1.16263,1.16323,1.16247,1.16265,5895,0,0
2025-10-27 10:00:00+00:00,1.16268,1.1628,1.16196,1.16199,7086,0,0
2025-10-27 11:00:00+00:00,1.16198,1.16333,1.16174,1.16284,8463,0,0
2025-10-27 12:00:00+00:00,1.16285,1.164,1.16261,1.16378,8078,0,0
2025-10-27 13:00:00+00:00,1.16379,1.16446,1.16354,1.16414,6750,0,0
2025-10-27 14:00:00+00:00,1.16413,1.16474,1.1635900000000001,1.1646,7260,0,0
2025-10-27 15:00:00+00:00,1.1646,1.16515,1.16377,1.16415,8005,0,0
2025-10-27 16:00:00+00:00,1.16415,1.16429,1.16317,1.16358,8986,0,0
2025-10-27 17:00:00+00:00,1.16358,1.16426,1.1632500000000001,1.16409,8175,0,0
2025-10-27 18:00:00+00:00,1.16408,1.16419,1.16326,1.16354,8512,0,0
2025-10-27 19:00:00+00:00,1.16353,1.1641,1.1632500000000001,1.16389,6941,0,0
2025-10-27 20:00:00+00:00,1.16388,1.16418,1.16356,1.16381,4498,0,0
2025-10-27 21:00:00+00:00,1.16382,1.16521,1.1635,1.16503,4853,0,0
2025-10-27 22:00:00+00:00,1.16503,1.16505,1.1644,1.16477,4242,0,0
2025-10-27 23:00:00+00:00,1.16477,1.1649,1.16436,1.16441,2232,0,0
2025-10-28 00:00:00+00:00,1.16443,1.16452,1.16439,1.1644700000000001,1005,12,0
2025-10-28 01:00:00+00:00,1.16445,1.1650800000000001,1.16445,1.16499,1980,0,0
2025-10-28 02:00:00+00:00,1.16499,1.16547,1.16495,1.1651,2375,0,0
2025-10-28 03:00:00+00:00,1.1650800000000001,1.16588,1.16463,1.16556,4945,0,0
2025-10-28 04:00:00+00:00,1.16556,1.1663999999999999,1.16549,1.16576,4841,0,0
2025-10-28 05:00:00+00:00,1.16576,1.16634,1.16539,1.16544,3208,0,0
2025-10-28 06:00:00+00:00,1.16544,1.1663000000000001,1.16541,1.16599,3480,0,0
2025-10-28 07:00:00+00:00,1.16599,1.16678,1.16588,1.16659,4015,0,0
2025-10-28 08:00:00+00:00,1.16659,1.1668,1.16626,1.16637,4565,0,0
2025-10-28 09:00:00+00:00,1.16637,1.16673,1.16547,1.16557,4856,0,0
2025-10-28 10:00:00+00:00,1.16556,1.16616,1.1651,1.1655,7480,0,0
2025-10-28 11:00:00+00:00,1.1655,1.16629,1.1648399999999999,1.16525,9742,0,0
2025-10-28 12:00:00+00:00,1.16522,1.16588,1.1645,1.16568,7601,0,0
2025-10-28 13:00:00+00:00,1.16568,1.16651,1.16547,1.16642,6461,0,0
2025-10-28 14:00:00+00:00,1.16642,1.16645,1.16549,1.16594,6560,0,0
2025-10-28 15:00:00+00:00,1.16593,1.16601,1.16351,1.16402,10147,0,0
2025-10-28 16:00:00+00:00,1.16402,1.16406,1.16253,1.16395,10154,0,0
2025-10-28 17:00:00+00:00,1.1639599999999999,1.16634,1.1637,1.16605,11170,0,0
2025-10-28 18:00:00+00:00,1.16605,1.1667399999999999,1.1655,1.16589,9395,0,0
2025-10-28 19:00:00+00:00,1.16589,1.16612,1.16567,1.16601,3158,0,0"""

def calculate_sma(data, period):
    return data.rolling(window=period).mean()

def calculate_ema(data, period):
    return data.ewm(span=period, adjust=False).mean()

def calculate_rsi(data, period=14):
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calculate_macd(data):
    ema12 = calculate_ema(data, 12)
    ema26 = calculate_ema(data, 26)
    macd_line = ema12 - ema26
    signal_line = calculate_ema(macd_line, 9)
    histogram = macd_line - signal_line
    return macd_line, signal_line, histogram

def calculate_bollinger_bands(data, period=20, std_dev=2):
    sma = calculate_sma(data, period)
    std = data.rolling(window=period).std()
    upper_band = sma + (std * std_dev)
    lower_band = sma - (std * std_dev)
    return upper_band, sma, lower_band

def calculate_stochastic(high, low, close, period=14):
    lowest_low = low.rolling(window=period).min()
    highest_high = high.rolling(window=period).max()
    k = 100 * (close - lowest_low) / (highest_high - lowest_low)
    d = k.rolling(window=3).mean()
    return k, d

def calculate_atr(high, low, close, period=14):
    tr1 = high - low
    tr2 = abs(high - close.shift())
    tr3 = abs(low - close.shift())
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
    atr = tr.rolling(window=period).mean()
    return atr

# Procesar datos
df = pd.read_csv(StringIO(h1_csv))
df['time'] = pd.to_datetime(df['time'])
df = df.sort_values('time').reset_index(drop=True)

# Calcular indicadores
df['sma_20'] = calculate_sma(df['close'], 20)
df['sma_50'] = calculate_sma(df['close'], 50)
df['sma_200'] = calculate_sma(df['close'], 200)
df['rsi'] = calculate_rsi(df['close'])
macd, signal, hist = calculate_macd(df['close'])
df['macd'] = macd
df['macd_signal'] = signal
df['macd_hist'] = hist
upper, middle, lower = calculate_bollinger_bands(df['close'])
df['bb_upper'] = upper
df['bb_middle'] = middle
df['bb_lower'] = lower
k, d = calculate_stochastic(df['high'], df['low'], df['close'])
df['stoch_k'] = k
df['stoch_d'] = d
df['atr'] = calculate_atr(df['high'], df['low'], df['close'])

# Obtener última vela
latest = df.iloc[-1]

print("=" * 60)
print("ANALISIS TECNICO COMPLETO: EURUSD (Ultimos 2 meses)")
print("=" * 60)
print(f"\nPRECIO ACTUAL: {latest['close']:.5f}")
print(f"Fecha: {latest['time']}")

print(f"\n--- TENDENCIA (Temporal H1) ---")
print(f"  Precio actual: {latest['close']:.5f}")
print(f"  SMA(20):  {latest['sma_20']:.5f}")
print(f"  SMA(50):  {latest['sma_50']:.5f}")
print(f"  SMA(200): {latest['sma_200']:.5f}")

trend_score = 0
if latest['close'] > latest['sma_20']:
    print("   [+] Precio > SMA(20): ALCISTA")
    trend_score += 1
else:
    print("   [-] Precio < SMA(20): BAJISTA")
    trend_score -= 1

if latest['sma_20'] > latest['sma_50']:
    print("   [+] SMA(20) > SMA(50): ALCISTA")
    trend_score += 1
else:
    print("   [-] SMA(20) < SMA(50): BAJISTA")
    trend_score -= 1

if latest['sma_50'] > latest['sma_200']:
    print("   [+] SMA(50) > SMA(200): ALCISTA")
    trend_score += 1
else:
    print("   [-] SMA(50) < SMA(200): BAJISTA")
    trend_score -= 1

print(f"\n--- INDICADORES TECNICOS ---")
print(f"  RSI(14): {latest['rsi']:.2f}")
if latest['rsi'] < 30:
    print("     -> SOBREVENDIDO (potencial compra)")
    rsi_signal = "BUY"
elif latest['rsi'] > 70:
    print("     -> SOBRECOMPRADO (potencial venta)")
    rsi_signal = "SELL"
else:
    print("     -> NEUTRAL")
    rsi_signal = "NEUTRAL"

print(f"\n  MACD:")
print(f"     Linea MACD:  {latest['macd']:.6f}")
print(f"     Senal:       {latest['macd_signal']:.6f}")
print(f"     Histograma:  {latest['macd_hist']:.6f}")
if latest['macd'] > latest['macd_signal']:
    print("     -> ALCISTA (MACD sobre senal)")
    macd_signal = "BUY"
else:
    print("     -> BAJISTA (MACD bajo senal)")
    macd_signal = "SELL"

print(f"\n  Bollinger Bands:")
print(f"     Superior: {latest['bb_upper']:.5f}")
print(f"     Media:    {latest['bb_middle']:.5f}")
print(f"     Inferior: {latest['bb_lower']:.5f}")
bb_position = (latest['close'] - latest['bb_lower']) / (latest['bb_upper'] - latest['bb_lower']) * 100
print(f"     Posicion: {bb_position:.1f}%")

print(f"\n  Stochastic:")
print(f"     %K: {latest['stoch_k']:.2f}")
print(f"     %D: {latest['stoch_d']:.2f}")
if latest['stoch_k'] < 20:
    print("     -> SOBREVENDIDO")
    stoch_signal = "BUY"
elif latest['stoch_k'] > 80:
    print("     -> SOBRECOMPRADO")
    stoch_signal = "SELL"
else:
    print("     -> NEUTRAL")
    stoch_signal = "NEUTRAL"

print(f"\n  ATR(14): {latest['atr']:.5f} (Volatilidad)")

# Calcular probabilidades
probability_long = 50
probability_short = 50

print(f"\n--- CONFLUENCIAS ---")
if trend_score > 0:
    probability_long += 15
    print("  [+] LONG: Tendencia alcista en MAs (+15%)")
if latest['rsi'] < 50 and latest['rsi'] > 30:
    probability_long += 10
    print("  [+] LONG: RSI en zona de compra (+10%)")
if macd_signal == "BUY":
    probability_long += 10
    print("  [+] LONG: MACD alcista (+10%)")
if latest['close'] > latest['bb_middle']:
    probability_long += 10
    print("  [+] LONG: Precio sobre BB media (+10%)")
if latest['stoch_k'] < 50:
    probability_long += 10
    print("  [+] LONG: Stochastic bajo (+10%)")

if trend_score < 0:
    probability_short += 15
    print("  [+] SHORT: Tendencia bajista en MAs (+15%)")
if latest['rsi'] > 50 and latest['rsi'] < 70:
    probability_short += 10
    print("  [+] SHORT: RSI en zona de venta (+10%)")
if macd_signal == "SELL":
    probability_short += 10
    print("  [+] SHORT: MACD bajista (+10%)")
if latest['close'] < latest['bb_middle']:
    probability_short += 10
    print("  [+] SHORT: Precio bajo BB media (+10%)")
if latest['stoch_k'] > 50:
    probability_short += 10
    print("  [+] SHORT: Stochastic alto (+10%)")

probability_long = min(85, max(30, probability_long))
probability_short = min(85, max(30, probability_short))

print(f"\n" + "=" * 60)
print("OPORTUNIDAD DE TRADING RECOMENDADA")
print("=" * 60)

if probability_long > probability_short:
    direction = "LONG (COMPRA)"
    prob = probability_long
    entry = latest['close']
    stop_loss = entry - (2 * latest['atr'])
    take_profit_1 = entry + (2 * latest['atr'])
    take_profit_2 = entry + (3 * latest['atr'])
    pips_sl = abs(entry - stop_loss) * 10000
    pips_tp1 = abs(entry - take_profit_1) * 10000
    pips_tp2 = abs(entry - take_profit_2) * 10000
else:
    direction = "SHORT (VENTA)"
    prob = probability_short
    entry = latest['close']
    stop_loss = entry + (2 * latest['atr'])
    take_profit_1 = entry - (2 * latest['atr'])
    take_profit_2 = entry - (3 * latest['atr'])
    pips_sl = abs(entry - stop_loss) * 10000
    pips_tp1 = abs(entry - take_profit_1) * 10000
    pips_tp2 = abs(entry - take_profit_2) * 10000

print(f"\nDIRECCION:  {direction}")
print(f"PROBABILIDAD DE EXITO: {prob}%")
print(f"\nParametros de la operacion:")
print(f"  Entrada:        {entry:.5f}")
print(f"  Stop Loss:      {stop_loss:.5f}  ({pips_sl:.1f} pips)")
print(f"  Take Profit 1:  {take_profit_1:.5f}  ({pips_tp1:.1f} pips)")
print(f"  Take Profit 2:  {take_profit_2:.5f}  ({pips_tp2:.1f} pips)")
print(f"  Risk/Reward:    1:{abs(take_profit_1-entry)/abs(entry-stop_loss):.2f}")

print(f"\n--- CONTEXTO (Ultimos 2 meses) ---")
print(f"  Maximo:    1.19181 (17 sep 2025)")
print(f"  Minimo:    1.15420 (14 oct 2025)")
print(f"  Rango:     3,761 pips")
print(f"  Precio actual vs maximo: {(1.19181 - latest['close'])*10000:.0f} pips abajo")
print(f"  Precio actual vs minimo: {(latest['close'] - 1.15420)*10000:.0f} pips arriba")
print(f"  Soporte clave:     1.1540 - 1.1560")
print(f"  Resistencia clave: 1.1720 - 1.1750")

print(f"\n[!] ADVERTENCIAS:")
print(f"  * Volatilidad alta reciente")
print(f"  * Zona de consolidacion 1.1600-1.1670")
print(f"  * Verificar calendario economico antes de operar")
print(f"  * NO arriesgar mas del 1-2% de tu cuenta")
print("=" * 60)
